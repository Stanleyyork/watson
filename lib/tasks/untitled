#use in other files: require './lib/tasks/PersonalityAPI'
require 'watson-api-client'

  #   t.string   "category"
  #   t.string   "subcategory"
  #   t.float    "percentage"
  #   t.float    "sampling_error"
  #   t.integer  "user_id"
  #   t.string   "attribute_name"
  #   t.string   "title"

  #   t.integer  "bookmark_id"
  #   t.grouping "string"

class PersonalityAPICall

	## EXAMPLES:
	# Personality.Call(1,"twitter",1)
	# Personalitiy.Call(17,"book",6,"http://www.gutenberg.org/files/2701/2701.txt")
	# Personality.Call(6,"facebook", 9)

	def Call(user_id, all)
		personality = WatsonAPIClient::PersonalityInsights.new(:user=>"fa30e7e1-7922-432c-ba1f-5bcde7c12e4d",
		                                                   :password=>"GEyCx8gQf5kL",
		                                                   :verify_ssl=>OpenSSL::SSL::VERIFY_NONE)
		
		if(all.downcase == "all")
			body = Bookmark.where(user_id: user_id).pluck(:bookmark_text).join(" ")
			result = personality.profile(
			  'Content-Type'     => "text/plain",
			  'Accept'           => "application/json",
			  'Accept-Language'  => "en",
			  'Content-Language' => "en",
			  'body'             => body
			  )
			ParseAndSave(JSON.parse(result.body), user_id, all)
		elsif(all.downcase == "yearly")
			(2010..2015).each do |year|
				body_array = Bookmark.where(user_id: user_id).where(year: year).pluck(:bookmark_text).join(" ")
				result = personality.profile(
				  'Content-Type'     => "text/plain",
				  'Accept'           => "application/json",
				  'Accept-Language'  => "en",
				  'Content-Language' => "en",
				  'body'             => body
				  )
				ParseAndSave(JSON.parse(result.body), user_id, all)
			end
		elsif(all.downcase == "2015")
			body_array = Bookmark.where(user_id: user_id).where(year: 2015).pluck(:bookmark_text).join(" ")
			result = personality.profile(
			  'Content-Type'     => "text/plain",
			  'Accept'           => "application/json",
			  'Accept-Language'  => "en",
			  'Content-Language' => "en",
			  'body'             => body
			  )
			ParseAndSave(JSON.parse(result.body), user_id, all)
		elsif(all.downcase = "single")
			Bookmark.where(user_id: user_id).all.each do |body|
				result = personality.profile(
				  'Content-Type'     => "text/plain",
				  'Accept'           => "application/json",
				  'Accept-Language'  => "en",
				  'Content-Language' => "en",
				  'body'             => body.bookmark_text
				  )
				ParseAndSave(JSON.parse(result.body), user_id, all, body.id)
			end
		else
			puts "invalid *all* input"
		end


		
	end

	def ParseAndSave(json_results, user_id, all, bookmark_id='')
		not_saved_counter = 0
		saved_counter = 0
		other_attributes = {title: "#{User.find(user_id).username}'s Personality #{all}", user_id: user_id, grouping: all, bookmark_id: bookmark_id}
		
		# Set count values of each category groupings
		needs_attribute_count = json_results['tree']['children'][1]['children'][0]['children'].count
		values_attribute_count = json_results['tree']['children'][2]['children'][0]['children'].count

		# Loops through Big 5 and saves them
		(0..4).each do |big_5_trait|
			(0..5).each do |attrib_number|
				attrib_object = json_results['tree']['children'][0]['children'][0]['children'][big_5_trait]['children'][attrib_number]
				big_5_json_object = {category: json_results['tree']['children'][0]['name'],
									 subcategory: json_results['tree']['children'][0]['children'][0]['children'][0]['name'],
									 attribute_name: attrib_object['name'],
									 percentage: attrib_object['percentage'],
									 sampling_error: attrib_object['sampling_error']}
				personalityEntry = Personality.new(big_5_json_object)
				personalityEntry.update_attributes(other_attributes)
				personalityEntry.save ? saved_counter += 1 : not_saved_counter += 1
			end
		end

		# Output and reset counters
		puts "COUNTER - Big 5 // Saved: #{saved_counter}, Not Saved: #{not_saved_counter}, total: 30"
		not_saved_counter = 0
		saved_counter = 0

		# Loops through Needs and Values and saves them
		(1..2).each do |need_or_value|
			needs_values_attribute_count = need_or_value > 1 ? values_attribute_count : needs_attribute_count
			(0..needs_values_attribute_count-1).each do |attrib|
				attrib_object = json_results['tree']['children'][need_or_value]['children'][0]['children'][attrib]
				needs_value_json_object = {category: json_results['tree']['children'][need_or_value]['name'],
									 attribute_name: attrib_object['name'],
									 percentage: attrib_object['percentage'],
									 sampling_error: attrib_object['sampling_error']}
				personalityEntry = Personality.new(needs_value_json_object)
				personalityEntry.update_attributes(other_attributes)
				personalityEntry.save ? saved_counter += 1 : not_saved_counter += 1
			end

			# Output and reset counters
			puts "COUNTER - Needs & Values #{need_or_value} // Saved: #{saved_counter}, Not Saved: #{not_saved_counter}, Total: #{need_or_value > 1 ? values_attribute_count : needs_attribute_count}"
			not_saved_counter = 0
			saved_counter = 0
		end

	end

end